OBJDIRS     += classifiers

TREE_SRC := decision_tree_classifier.cc
TREE_OBJ := $(patsubst %.cc,$(OBJDIR)/classifiers/%.o,$(TREE_SRC))

all:	$(OBJDIR)/classifiers/client_tree

$(OBJDIR)/classifiers/client_tree: $(OBJDIR)/classifiers/test_client_tree.o $(TREE_OBJ) $(PROTO_OBJ) $(OBJDIR)/libmpc.so $(OBJDIR)/libcipher.so $(OBJDIR)/libtree.so $(OBJDIR)/libprotobuf_defs.so $(OBJDIR)/libnet.so
	$(CXX) $< $(TREE_OBJ) -o $@  $(SHAIFHEPATH)/fhe.a $(LDFLAGS) -lmpc -lcipher -ltree\
	   -L$(NTLLIBPATH) -lntl  -lgf2x -lgmp   $(L_BOOST_SYSTEM)\
       -lprotobuf -lprotobuf_defs -lnet -lutil


all:	$(OBJDIR)/classifiers/server_tree

$(OBJDIR)/classifiers/server_tree: $(OBJDIR)/classifiers/test_server_tree.o $(TREE_OBJ) $(PROTO_OBJ) $(OBJDIR)/libmpc.so $(OBJDIR)/libcipher.so $(OBJDIR)/libtree.so $(OBJDIR)/libmath.so $(OBJDIR)/libprotobuf_defs.so $(OBJDIR)/libnet.so
	$(CXX) $< $(TREE_OBJ) -o $@  $(SHAIFHEPATH)/fhe.a $(LDFLAGS) -lmpc -lcipher -ltree -lmath -lutil\
	   -L$(NTLLIBPATH) -lntl  -lgf2x -lgmp   $(L_BOOST_SYSTEM)\
       -lprotobuf -lprotobuf_defs -lnet -lutil


FOREST_SRC := random_forest_classifier.cc
FOREST_OBJ := $(patsubst %.cc,$(OBJDIR)/classifiers/%.o,$(FOREST_SRC))

all:	$(OBJDIR)/classifiers/client_forest

$(OBJDIR)/classifiers/client_forest: $(OBJDIR)/classifiers/test_client_forest.o $(FOREST_OBJ) $(PROTO_OBJ) $(OBJDIR)/libmpc.so $(OBJDIR)/libcipher.so $(OBJDIR)/libtree.so $(OBJDIR)/libprotobuf_defs.so $(OBJDIR)/libnet.so
	$(CXX) $< $(FOREST_OBJ) -o $@  $(SHAIFHEPATH)/fhe.a $(LDFLAGS) -lmpc -lcipher -ltree\
	   -L$(NTLLIBPATH) -lntl  -lgf2x -lgmp   $(L_BOOST_SYSTEM)\
       -lprotobuf -lprotobuf_defs -lnet -lutil


all:	$(OBJDIR)/classifiers/server_forest

$(OBJDIR)/classifiers/server_forest: $(OBJDIR)/classifiers/test_server_forest.o $(FOREST_OBJ) $(PROTO_OBJ) $(OBJDIR)/libmpc.so $(OBJDIR)/libcipher.so $(OBJDIR)/libtree.so $(OBJDIR)/libmath.so $(OBJDIR)/libprotobuf_defs.so $(OBJDIR)/libnet.so
	$(CXX) $< $(FOREST_OBJ) -o $@  $(SHAIFHEPATH)/fhe.a $(LDFLAGS) -lmpc -lcipher -ltree -lmath -lutil\
	   -L$(NTLLIBPATH) -lntl  -lgf2x -lgmp   $(L_BOOST_SYSTEM)\
       -lprotobuf -lprotobuf_defs -lnet -lutil


HUGE_FOREST_SRC := model.cc
HUGE_FOREST_OBJ := $(patsubst %.cc,$(OBJDIR)/classifiers/%.o,$(HUGE_FOREST_SRC))

all:	$(OBJDIR)/classifiers/client_huge_forest

$(OBJDIR)/classifiers/client_huge_forest: $(OBJDIR)/classifiers/test_client_huge_forest.o $(FOREST_OBJ) $(HUGE_FOREST_OBJ) $(PROTO_OBJ) $(OBJDIR)/libmpc.so $(OBJDIR)/libcipher.so $(OBJDIR)/libtree.so $(OBJDIR)/libprotobuf_defs.so $(OBJDIR)/libnet.so
	$(CXX) $< $(FOREST_OBJ) $(HUGE_FOREST_OBJ) -o $@  $(SHAIFHEPATH)/fhe.a $(LDFLAGS) -lmpc -lcipher -ltree\
	   -L$(NTLLIBPATH) -lntl  -lgf2x -lgmp   $(L_BOOST_SYSTEM)\
       -lprotobuf -lprotobuf_defs -lnet -lutil


all:	$(OBJDIR)/classifiers/server_huge_forest

$(OBJDIR)/classifiers/server_huge_forest: $(OBJDIR)/classifiers/test_server_huge_forest.o $(FOREST_OBJ) $(HUGE_FOREST_OBJ) $(PROTO_OBJ) $(OBJDIR)/libmpc.so $(OBJDIR)/libcipher.so $(OBJDIR)/libtree.so $(OBJDIR)/libmath.so $(OBJDIR)/libprotobuf_defs.so $(OBJDIR)/libnet.so
	$(CXX) $< $(FOREST_OBJ) $(HUGE_FOREST_OBJ) -o $@  $(SHAIFHEPATH)/fhe.a $(LDFLAGS) -lmpc -lcipher -ltree -lmath -lutil\
	   -L$(NTLLIBPATH) -lntl  -lgf2x -lgmp   $(L_BOOST_SYSTEM)\
       -lprotobuf -lprotobuf_defs -lnet -lutil

# vim: set noexpandtab:
